syntax = "proto2";

package ru.sktbelpa.pressure_self_writer;

enum INFO {
    // верися этого протокола
    PROTOCOL_VERSION = 1;

    // идентификатор стенда
    PRESSURE_SELF_WRITER_ID = 0xE006;

    // ИД, преднозначенный для поиска
    ID_DISCOVER = 0xFFFF;

	// магическое число для режима MDProtobuf
    MAGICK = 0x09;
}

// код выполнения операции
enum STATUS {
    // успешное завершение
    OK = 0;

    // недопустимое значение поля
    ERRORS_IN_SUBCOMMANDS = 1;

    PROTOCOL_ERROR = 100;
}

// Общий запрос для поиска
message Request {
    // Идентификатор запроса. Служит для определения пары запрос/ответ
    required uint32             id = 1;
    // id устройства (идентификация)
    required uint32             deviceID = 2;
    // версия протокола запрашивающего
    required uint32             protocolVersion = 3;

    // Запись Настройки
    optional WriteSettingsReq   writeSettings = 10;

    // Запрос информации
    optional Empty              getInfo = 20;

    // запрос выходных значений
    optional OutputReq          getOutputValues = 30;

    // Команды
    optional FlasCommand        flashCommand = 40;

    // Смена пароля
    optional ChangePassword     changePassword = 50;
}

// Общий ответ сервера
message Response {
    // Идентификатор запроса, которому соответствует этот ответ
    required uint32             id = 1;
    // id устройства
    required uint32             deviceID = 2;
    // версия протокола с которой работает устройство
    required uint32             protocolVersion = 3;
    // общий статус выполнения
    required STATUS             Global_status = 4;
    // таймштамп устройства, когда фактически был сгененрирован ответ
    required fixed64            timestamp = 5;

    // Настройки
    optional SettingsResponse   getSettings = 10;

    // Информация (неизменяемые значений)
    optional InfoResponse       info = 20;

    // Выходные значения
    optional OutputResponse     output = 30;

    // Статус флеш-памяти
    optional FlashStatus        flashStatus = 40;

    // Статус смены пароля
    optional ChangePasswordStatus changePasswordStatus = 50;
}

//----------------------------------------------------------------------------

// Запрос записи настроек
message WriteSettingsReq {
	// серийный номер
	optional uint32 			setSerial = 1;
	// Время измерения по каналу давления
	optional uint32 			setPMesureTime_ms = 2;
	// Время измерения по каналу температуры
	optional uint32 			setTMesureTime_ms = 3;
	// Опорная частота
	optional uint32 			setFref = 4;
	
	// Включить канал давления
	optional bool				setPEnabled = 10;
    // Включить канал температуры
	optional bool				setTEnabled = 11;
    // Включить измерение температуры микроконтроллера
    optional bool				setTCPUEnabled = 12;
    // Включить измерение апряжение батареи
	optional bool				setVBatEnable = 13;
	
	// Коэффициенты давления
	optional PCoefficients		setPCoefficients = 30;
    // Коэффициенты температуры
	optional T5Coefficients		setTCoefficients = 31;

    // Рабочий диопазон давлений
    optional WorkRange          setPWorkRange = 40;
    // Рабочий диопазон температур
    optional WorkRange          setTWorkRange = 41;
    // Рабочий диопазон температур микроконтроллера
    optional WorkRange          setTCPUWorkRange = 42;
    // Рабочий диопазон напряжений батареи
    optional WorkRange          setBatWorkRange = 43;

    // Установить дату калибровки
    optional CalibrationDate    setCalibrationDate = 50;

    // Установить коректировку нуля по давлению
    optional float              setPZeroCorrection = 60;
    // Установить коректировку нуля по температуре
    optional float              setTZeroCorrection = 61;

    // Установить конфигурацию записи
    optional WriteConfig        setWriteConfig = 70;

    // Установить задержку старта записи в секундах
    optional uint32             setStartDelay = 80;

    // Установить единицы измерение давления
    optional PressureMeassureUnits setPressureMeassureUnits = 90;

    // Установить пароль доступа
    optional string             setPassword = 100;
}

// Настройки
message SettingsResponse {
	// серийный номер
	required uint32 			Serial = 1;
	// Время измерения по каналу давления
	required uint32 			PMesureTime_ms = 2;
	// Время измерения по каналу температуры
	required uint32 			TMesureTime_ms = 3;
	// Опорная частота
	required uint32 			Fref = 4;

    // Включен канал давления
	required bool				PEnabled = 10;
    // Включен канал температуры
	required bool				TEnabled = 11;
    // Включен измерение температуры микроконтроллера
    required bool				TCPUEnabled = 12;
    // Включен измерение апряжение батареи
	required bool				VBatEnable = 13;
	
	// Коэффициенты
	required PCoefficients		PCoefficients = 30;
	required T5Coefficients		TCoefficients = 31;

    // Рабочий диопазон давлений
    required WorkRange          PWorkRange = 40;
    // Рабочий диопазон температур
    required WorkRange          TWorkRange = 41;
    // Рабочий диопазон температур микроконтроллера
    required WorkRange          TCPUWorkRange = 42;
    // Рабочий диопазон напряжений батареи
    required WorkRange          BatWorkRange = 43;

    // Дата калибровки
    required CalibrationDate    CalibrationDate = 50;

    // Коректировка нуля по давлению
    required float              PZeroCorrection = 60;
    // Коректировка нуля по температуре
    required float              TZeroCorrection = 61;

    // Конфигурация записи
    required WriteConfig        writeConfig = 70;

    // Задержка старта записи в секундах
    required uint32             startDelay = 80;

    // Единицы измерение давления
    required PressureMeassureUnits pressureMeassureUnits = 90;

    // пароль доступа
    required string             password = 100;
}

// рабочий диопазон
message WorkRange {
    // нижняя граница рабочего диопазона
    optional float              minimum = 1;
    // верхняя граница рабочего диопазона
    optional float              maximum = 2;
    // допустимый предел перегрузки
    optional float              absolute_maximum = 3;
}

// Дата калибровки
message CalibrationDate {
    optional uint32             Day = 1;
    optional uint32             Month = 2;
    optional uint32             Year = 3;
}

// Конфигурация записи
message WriteConfig {
    // Базовый интервал записи в милисекундах
    optional uint32             BaseInterval_ms = 1;

    // Записывать значение давления каждые BaseInterval_ms интервалов
    optional uint32             PWriteDevider = 10;
    // Записывать значение температуры каждые BaseInterval_ms интервалов
    optional uint32             TWriteDevider = 11;
}

// Запрос записи коэфициентов давления
message PCoefficients {
	optional float 				Fp0 = 1;
	optional float				Ft0 = 2;
    optional float              A0 = 11;
    optional float              A1 = 12;
    optional float              A2 = 13;
    optional float              A3 = 14;
    optional float              A4 = 15;
    optional float              A5 = 16;
    optional float              A6 = 17;
    optional float              A7 = 18;
    optional float              A8 = 19;
    optional float              A9 = 20;
    optional float              A10 = 21;
    optional float              A11 = 22;
    optional float              A12 = 23;
    optional float              A13 = 24;
    optional float              A14 = 25;
    optional float              A15 = 26;
}

// Запрос записи коэфициентов температуры
message T5Coefficients {
	optional float 				T0 = 1;
	optional float				F0 = 2;
    optional float				C1 = 10;
    optional float				C2 = 11;
    optional float				C3 = 12;
    optional float				C4 = 13;
    optional float				C5 = 14;
}

enum PressureMeassureUnits {
    // Паскали
    Pa = 0x00220000;

    // Бар
    Bar = 0x004E0000;

    // Ат (кгс/см2)
    At = 0x00A10000;

    // мм водного столба
    mmH20 = 0x00A20000;

    // м. ртутного столба
    mHg = 0x00A30000;

    // Атм
    Atm = 0x00A40000;

    // Фунт на квадратный дюйм
    PSI = 0x00AB0000;
}

//----------------------------------------------------------------------------

// Ответ: информация об устройстве
message InfoResponse {
    // Версия
    required uint32             HW_Version = 1;
    required uint64             SW_Version = 2;

    // Флаги неисправности каналов
    required bool               PressureChannelFailed = 10;
    required bool               TemperatureChannelFailed = 11;

    // Флаги выхода за границы рабочего диопазона
    required bool               PressureOutOfrange = 20;
    required bool               TemperatureOutOfrange = 21;
    required bool               CPUTemperatureOutOfrange = 22;
    required bool               VbatOutOfrange = 23;

    // Флаги выхода критического превышения рабочего диопазона
    required bool               OverpressDetected = 30;
    required bool               OverheatDetected = 31;
    required bool               OverheatCPUDetected = 32;
    required bool               OverVbatDetected = 33;
}

//----------------------------------------------------------------------------

// Запрос выходных значений
message OutputReq {
    // Температура + Давление + Температура электроники
    optional Empty              getMainValues = 1;

    // Частота давления + частота температуры
    optional Empty              getF = 10;

    // отладочные значения
    optional Empty              getRAW = 20;
}

// Выходные значения
message OutputResponse {
    // Температура
    optional float              pressure = 1;
    // Давление
    optional float              temperature = 2;
    // Температура электроники
    optional float              TCPU = 3;
    // Напряжение на батарее
    optional float              Vbat = 4;

    // Частота давления
    optional float              FP = 10;
    // частота температуры
    optional float              FT = 11;

    // Результат работы канала давления
    optional FreqmeterResult    P_result = 20;
    // Результат работы канала температуры
    optional FreqmeterResult    T_result = 21;
    // код АЦП температуры микроконтроллера
    optional uint32             ADC_TCPU = 25;
    // код АЦП напряжения на батарее
    optional uint32             ADC_Vbat = 26;
}

// Результат работы частотомера
message FreqmeterResult {
    required uint32             Target = 1;
    required uint32             Result = 2;
}

//----------------------------------------------------------------------------

message FlasCommand {
    // Сбросить флаги мониторинга перегрева/превышения давления
    optional Empty              ResetMonitoring = 1;
    // Если 1, начинает процедуру очистки памяти данных
    optional bool               ClearMemory = 2;
}

message FlashStatus {
    enum Status {
        // Успех 
        OK = 0;
        // Идет очистка памяти
        Ereasing = 1;
        // Ошибка сброса мониторинга
        ResetMonitoringFailed = 2;
    }

    // Размер страницы флеш-памяти в байтах
    required uint32             FlashPageSize = 1;
    // Количество страниц флеш-памяти
    required uint32             FlashPages = 2;
    // Занятых страниц флеш-памяти
    required uint32             FlashUsedPages = 3;

    // Статутс флеш-памяти
    required Status             status = 10;
}

//----------------------------------------------------------------------------

message ChangePassword {
    required string             newPassword = 1;
}

message ChangePasswordStatus {
    required bool               passwordChanged = 1;
}

//----------------------------------------------------------------------------

// пустое сообщение - плейсхолдер
message Empty {}